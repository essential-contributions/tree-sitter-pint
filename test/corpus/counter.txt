===
counter
===

storage {
    counter: int,
}

predicate Increment {
    state counter: int = storage::counter;
    constraint (counter == nil && counter' == 1) || counter' == counter + 1;
}

---

(source_file
  (decl
    (decl_storage
      (storage_var
        (ident)
        (type
          (ty_custom
            (path
              (ident)))))))
  (decl
    (decl_pred
      (ident)
      (pred_body
        (decl_state
          (ident)
          (type
            (ty_custom
              (path
                (ident))))
          (state_init
            (storage_access
              (ident)))))
      (pred_body
        (decl_constraint
          (expr
            (expr_additive
              (expr
                (expr_cmp
                  (expr
                    (expr_postfix
                      (expr
                        (expr_logical_or
                          (expr
                            (term
                              (expr
                                (expr_cmp
                                  (expr
                                    (expr_postfix
                                      (expr
                                        (expr_logical_and
                                          (expr
                                            (expr_cmp
                                              (expr
                                                (term
                                                  (ident)))
                                              (expr
                                                (term
                                                  (ident)))))
                                          (expr
                                            (term
                                              (ident)))))))
                                  (expr
                                    (term
                                      (lit
                                        (number))))))))
                          (expr
                            (term
                              (ident)))))))
                  (expr
                    (term
                      (ident)))))
              (expr
                (term
                  (lit
                    (number)))))))))))
